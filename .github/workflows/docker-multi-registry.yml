name: Build and Push to Multiple Registries

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  release:
    types: [published]

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        registry:
          - name: "GitHub Container Registry"
            url: "ghcr.io"
            username: ${{ github.actor }}
            password: ${{ secrets.GITHUB_TOKEN }}
            image: "ghcr.io/${{ github.repository }}"
          - name: "Docker Hub"
            url: "docker.io"
            username: ${{ secrets.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}
            image: "${{ secrets.DOCKERHUB_USERNAME }}/beian-exporter"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to ${{ matrix.registry.name }}
      uses: docker/login-action@v3
      with:
        registry: ${{ matrix.registry.url }}
        username: ${{ matrix.registry.username }}
        password: ${{ matrix.registry.password }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ matrix.registry.image }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push to ${{ matrix.registry.name }}
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDTIME=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.created'] }}
          VERSION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.version'] }}
          REVISION=${{ fromJSON(steps.meta.outputs.json).labels['org.opencontainers.image.revision'] }}